<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"

	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd

       	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 配置文件 -->
	<!-- <context:property-placeholder location="classpath:datasource.properties"/> -->
	<context:property-placeholder
		location="file:/opt/fonsview/NE/rs/rs-m/etc/datasource.properties" />


	<!-- 配置druid数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据库连接基础信息 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="1000" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<!-- 验证数据库连接有效性，要求查询语句 -->
		<property name="validationQuery" value="SELECT 1" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->
		<property name="testOnReturn" value="false" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="true" />
		<!-- 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="mergeStat" /> -->
		<property name="filters" value="stat" />
		
<!-- 		<property name="defaultAutoCommit" value="false" /> -->
	</bean>


	<!-- Spring组件扫描 -->
	<context:component-scan base-package="com.fonsview.rs" />



	<!-- JPA实体管理 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
			    <value>com.fonsview.rs.comm.model</value>
			    <value>com.fonsview.rs.sys.model</value>
			    <value>com.fonsview.rs.security.model</value>
			     <value>com.fonsview.rs.model</value>
			</list>
		</property>
		<property name="persistenceProvider">
			<bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
	</bean>
	
	<!-- JDBC SQL 操作 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />        
    </bean>
	
	<!-- 事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- JDBC事务(自行处理) -->
	<bean id="dsTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />  
	</bean>
	
	<!-- 验证码 -->
    <bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">    
        <constructor-arg type="com.octo.captcha.service.captchastore.CaptchaStore" index="0">    
            <ref bean="fastHashMapCaptchaStore"/>    
        </constructor-arg>       
<!--         which captcha Engine you use        -->
        <constructor-arg type="com.octo.captcha.engine.CaptchaEngine" index="1">    
            <ref bean="captchaEngineGenerator"/>    
        </constructor-arg>       
        <constructor-arg index="2">       
            <value>180</value>       
        </constructor-arg>       
        <constructor-arg index="3">       
            <value>100000</value>       
        </constructor-arg>       
        <constructor-arg index="4">       
            <value>75000</value>       
        </constructor-arg>      
    </bean>    
    <bean id="fastHashMapCaptchaStore" class="com.octo.captcha.service.captchastore.FastHashMapCaptchaStore"/>       
<!--     you can define more than one captcha engine here        -->
    <bean id="captchaEngineGenerator" class="com.hoob.rs.sys.CaptchaEngineGenerator"/>

	<!-- quartz配置  动态配置所以我们将 Factory 作为一个service一样的接口 QuartzJobFactory.java-->
    <!-- 调度工厂 -->
    <bean id="schedulerFactoryBean" class="com.hoob.rs.sys.init.SchedulerFactoryBeanWithShutdownDelay" destroy-method="destroy">
		<!--此处必须要注入此属性，否则在job业务代码类中无法通过spring来注入属性-->
		<property name="jobFactory" ref="myJobFactory"></property>
		<property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">CMSscheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">15</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>          
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>         
            </props>
        </property>
    </bean>
    
    <!-- 上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      	<property name="maxUploadSize" value="104857600"/>
      	<property name="defaultEncoding" value="utf-8"/>  
        <property name="maxInMemorySize" value="4096"/>
    </bean>
       
       
</beans>